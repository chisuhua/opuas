// opuas/src/Validator.cpp

#include "Validator.h"
#include <iostream>
#include <sstream>

// --- Include coasm_infra generated parser headers for validation ---
// These are generated by ANTLR from coasm_infra's coasm.g4
#include "antlr4-runtime.h"
#include "coasmLexer.h" // From coasm_infra's generated ANTLR output
#include "coasmParser.h" // From coasm_infra's generated ANTLR output

bool validateCoasmSyntax(const std::string& coasmCode) {
    if (coasmCode.empty()) {
        std::cerr << "Validation Error: Empty COASM code provided for validation.\n";
        return false;
    }

    try {
        // --- Core ANTLR Validation Workflow ---
        antlr4::ANTLRInputStream input(coasmCode);
        coasmLexer lexer(&input); // Use coasm_infra's generated lexer
        antlr4::CommonTokenStream tokens(&lexer);
        coasmParser parser(&tokens); // Use coasm_infra's generated parser

        // --- Parse the entire input ---
        // Assuming 'prog' is the start rule in coasm.g4
        coasmParser::ProgContext* tree = parser.prog();

        // --- Check for syntax errors ---
        size_t numErrors = parser.getNumberOfSyntaxErrors();
        if (numErrors > 0) {
            std::cerr << "Validation Error: " << numErrors
                      << " syntax error(s) found in COASM code by coasm_infra parser.\n";
            // ANTLR usually prints errors to stderr already via its default error listener
            return false;
        } else {
            // std::cout << "Validation Info: No syntax errors detected by coasm_infra parser.\n";
            return true;
        }
    } catch (const std::exception& e) {
        std::cerr << "Validation Error: Exception occurred during coasm_infra parsing: " << e.what() << std::endl;
        return false;
    } catch (...) {
        std::cerr << "Validation Error: Unknown exception occurred during coasm_infra parsing." << std::endl;
        return false;
    }
}
