// opuas/src/Parser.cpp
#include "Parser.h"
#include "antlr4-runtime.h"
// Include headers generated by coasm_infra's ANTLR from coasm.g4
#include "coasmLexer.h"
#include "coasmParser.h"
#include <iostream>
#include <sstream>
#include <memory>

namespace opuas {

Parser::Parser(const std::string& coasmCode) : inputCode(coasmCode) {}

bool Parser::parse() {
    try {
        antlr4::ANTLRInputStream input(inputCode);
        coasmLexer lexer(&input); // Use coasm_infra's generated lexer
        antlr4::CommonTokenStream tokens(&lexer);
        coasmParser parser(&tokens); // Use coasm_infra's generated parser

        // Parse the entire input (assuming 'prog' is the start rule)
        parseTree = parser.prog();

        size_t numErrors = parser.getNumberOfSyntaxErrors();
        if (numErrors > 0) {
            std::cerr << "Parser Error: " << numErrors << " syntax error(s) found in COASM code.\n";
            // ANTLR usually prints errors to stderr already via its default error listener
            parseTree.reset(); // Clear the tree on error
            return false;
        } else {
            // std::cout << "Parser Info: No syntax errors detected.\n";
            return true;
        }
    } catch (const std::exception& e) {
        std::cerr << "Parser Error: Exception occurred during parsing: " << e.what() << std::endl;
        parseTree.reset();
        return false;
    } catch (...) {
        std::cerr << "Parser Error: Unknown exception occurred during parsing." << std::endl;
        parseTree.reset();
        return false;
    }
}

coasmParser::ProgContext* Parser::getParseTree() {
    return parseTree.get();
}

} // namespace opuas
